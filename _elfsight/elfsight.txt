
================ команда elfsight:

1) Андрей Юсупов            - руководитель
2) Татьяна Малофеева        - HR

3) Владимир Иваненко        - (собеседовал)
4) Владимир Федотов         - (собеседовал)

5) Макс Исаев               
6) Дима Сотников            - (Оренбург)

7) Я                        - разработчик 2-й группы поддержки

================





================ почта / пароли:

корпаративная почта           a.byshok@elfsight.com
npm.js                        elfsight_byshok,  пароль  -  ALD52k$2yIj%|yX^0
ubuntu WSL                    name user, password 1234
Sluck                         пароль мой (нерабочий)
Notion                        пароль мой (нерабочий)

Удобней всего заходить в рабочие аккаунты через 'Google авторизацию'
в будующем планируется перенести все пароли в password manager https://1password.com

================





================ организационные моменты:

- за 10 минут до ежедневного митинга приходит уведомление на почту
- пн митинг по спринту (все спринты длиной в неделю)
  вт-пт  -  митинг на день (обсуждается что сделал и что буду делать сегодня)

================





================ Jira projects:

        Dev:                                                               Support:

- задачи, которые мы себе запланировали                - вверху backlog'a самые приоритетные ticket'ы (задачи в Kanban)
  для разработки виджетов                              - здесь задачи от клиента, хотелки
- задачи прилетают от Support                          - правки виждетов из-зи несовместимости с клиентскими стилями
- вверху backlog'a самые приоритетные                  - мелкие задачи (несовместимость с клиентскими стилями) нужно закрывать                  
- задачи из Support важней, т.к. это наши                здесь, а крупный траблы самого виджета нужно перекидывать в DEV для    
  клиенты, их берем первыми                              правки
- здесь Scrum, а в Support Kanban                      - задачу из toDo перекидываю в Kanban board в колонку inProgress; при 
                                                         завершении задачи нужно писать что я пофиксил (особо не расписывать, 
                                                         без тех. деталей, это для поддержки и клиента)
                                                       - при закрытии задачи так же обязательно указывать widget allias (псевдоним),
                                                         marketplace (где продается виджет(площадка), обычно elfsight), CMS 
                                                         клиентского сайта (wordpress...), тип закрытой задачи:
                                                            * conflict (кофликт css, js с клинтским)
                                                            * consult (консультация, совет, на словах)
                                                            * feature (внедрение новой фичи или улучшение)
                                                            * install (помогли в установке виджета)
                                                            * issue (устранение бага в самом виджете) 
                                                       - если есть вопросы по задаче (препятствия), не дающие ее сделать, то нужно
                                                         спросить написав в комментарий задачи и после поставить 'add flag'.  Эта 
                                                         задача попадает в Kanban board колонку 'ipediment' (препятствие). Тех 
                                                         поддержка или кто-то другой (1-я линия) читает коммент и присылает помощь 
                                                         мне в Slack (в группу Jira). Тем временем я беру другую верхную в backlog
                                                         задачу. И после ее завершения, возвращаюсь к предыдущей недоделанной

================





================ развертывание проектов:

  Что бы открытия виджета в режиме preview нужно из bitbucket клонировать репозиторий 'apps-editor'  установить его пакеты.
Далее запускаем его: npm run dev. Запустится на порте http://localhost:8080.
  Параллельно запускаем (так же на линуксовской оболочке WSL) клонированный виджет. Если запускаем скрипт preview:dev, 
то мы 'слушаем' от local-editor, который мы запустили на localhost:8080 (apps-editor, в нем превью всех виджетов, 
их админка). Виджет запустится на http://localhost:8004, но ничего не будет отображаться, но на localhost:8080 будет 
изначальное релизное отображение виджета с дефолтными настройками.
  А если запустить скрипт app:dev (он же start) виджета, то виджет будет инициализироваться (брать настройки, конфиг) из
/app/index.html, в котором конфиг, который можно менять. Теперь на localhost:8004 будет отображаться виджет с теми 
конфигами, которые укажем. Для теста клиентских настроек виджета, который интегрирован на его сайт, заходим сайт, 
ссылка на который указана в задаче, и в расширении 'Elfsight Widgets Info' копируем объект-конфиг и подставляем в index.html.
  Так же расширение 'Elfsight Widgets Info' показывает ID виджета, по которому его можно найти в 
https://apps.elfsight.com/nova-656c66 - это по сути база уже интегрированных виджетов на клиентские сайты. Здесь можно
вносить изменения/правки и сохранять -> отобразится на сайте клиента (обычно это перебивание стилей или кастомизация ui).

================ 





================ установка Ubuntu LTS:

  Корпаративные пакеты делались под Mac OS, поэтому в Windows при npm i выдаст ошибки.
Нужно установить Linux'ую оболочку WSL (коммандная строка), т.к. Mac интегрирован в Linux лучше.
WSL можно скачать из Microsoft Store или через Power Shell

в powershell от имени админа
curl.exe -L -o ubuntu-1804.appx https://aka.ms/wsl-ubuntu-1804

---- что бы скачать Microsoft Store:
https://kakpedia.org/%D0%BA%D0%B0%D0%BA-%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%B8%D1%82%D1%8C-%D0%BC%D0%B0%D0%B3%D0%B0%D0%B7%D0%B8%D0%BD-%D0%B2-windows-10/
включение или отключение компонентов Windows -> подсистема windows для linux -> из Microsoft Store устанавлюваю Ubuntu 18.04 LTS


После установки нужно установить Node.js под Linux оболочку
nvm i node; nvm i --lts

что бы была 'Открыть окно в Bash здесь' нужно поставить  Bash_context.reg

================





================ что бы можно было качать корпаративные плагины из приватного npm:

в https://www.npmjs.com -> auth tokens -> create new token
npm config set //registry.npmjs.org/:_authToken=$NPM_AUTH_TOKEN

================ 





================ Slack:

  Общение происходит в каналах или личных сообщениях.

Каналы бывают:
- публичные (может вступить любой член команды)
- приватные (можно попасть только по приглашению)
Принято создавать один канал на одну тему для дискуссий

Личные сообщения бывают:
- один на один
- групповые

  Каналы отличаются от групповых личных сообщений тем, что после создания
группы (личные сообщения) в нее никто не может вступить или выйти из нее.
А в канале это возможно.

  Звездочкой можно добавить избранные переписки - в меню появится дополнительный 
список Starred.

  Из каждого сообщения в канале или группе можно создать отдельный 'thread' (нить) 
- личная переписка внутри общей, которую видят только 2-е. Нажать на иконку сообщения 
при наведении на чье то сообщение в общем списке группы/канала.

  Так же в контекстном меню сообщения группы/канала можно выбрать 'pin to chanel' -
прикрепить сообщение к каналу - оно будет видно всем как прикрепленное.
  А если нажать звездочку (добавить в избранное), то будет видно только мне в этом
канале как избранное.

              Каналы в sluck:
                                                                                    открытые:
# daily_meetings:       отчеты по работе команды, пульс команды
# elfsight_news:        новинки в по, новости о том, что выпускаем
# elfsight_team:        общие вопросы всем, неформальное общение ('всем привет')
# organize_party:       дни рождения
# questions_to_dev:     вопросы разрабам от копирайтеров...
# share_issue:          проблемы/баги от неразрабов, может кто то что то нашел
# share_review:         отзывы о компании
# share_usecase:        клевые примеры использования наших пользователей
                                                                                    закрытые:
# team_dev:             каналы разрабов
# team_support          1-я и 2-я группа поддержки

================ 





================ glossary:

refund -          возврат денег клиенту, если не можем пофиксить
onboard -         условно аклиматизация

================ 






----------  Теория

                                    Jira & SCRUM:

      Team:
- Product Owner  -  представитель бизнеса, который хорошо знает его потребности и имеет 
                    представление каким должен быть продукт; вместе с ним формируется 
                    backlog, который затем разбивается на спринты.
- Scrum Master
- Developers





